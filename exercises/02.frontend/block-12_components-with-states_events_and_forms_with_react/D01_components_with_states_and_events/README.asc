This is a project for the `Stateful components` content.

== Exercise 1

- Change your page so that, instead of displaying the entire list of Pokémon, it displays one Pokémon at a time. When you press a Next Pokémon button, the page will display the next Pokémon in the list, and then the next, and so on. When reaching the last pokémon in the list, the pokedex must return to the first pokémon at the press of the button.

== Exercise 2

- Your pokedex must have two buttons containing the Fire and Psychic types. From that selection, the pokedex should only circulate through Pokémon of that type. When the page loads, one of these filters must be selected.

== Bonus

Now that you've got all the Pokémon, can you get all the bonuses ?! It is not easy to complete them all! Do as many as you can.

* Separate CSS styles by component, making a .css file for each.

* Your pokedex must have a third button called All to reset the filter. After clicking it, the pokedex should circulate again through all pokémons. When the page loads, the selected filter must be All.

* Create a Button component and use it to make your Pokedex buttons reusable. Tip: search for React's this.props.children!

* Make the filtering buttons dynamic: your pokedex should generate a filtering button for each type of pokémon available in the data, regardless of which or how many, without repetition of types. That is, if your pokedex has Fire, Psychic, Electric and Normal pokémons, a button for each of these types should appear as a filter option. In addition, she must hold the All button.

* Make the Next Pokémon button disabled if the filtered list of Pokémon has only one Pokémon.

Below, an example with all the bonuses made:

image::images/pokedex.gif[]
