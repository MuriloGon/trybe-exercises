== Exercises

. Create a script to calculate a person's Body Mass Index (BMI).
.. The formula to calculate BMI is weight / height^2.
.. Start by creating a new node package with npm init and answering npm's questions.
.. For now, don't worry about asking for input from the user. Use fixed values ​​for weight and height.
.. Store or script in imc.js file.

. Now allow the script to be run via the npm run imc command
.. The new script created must contain the command that calls the node to execute the imc.js file.

. It's time to make our script more interactive! Let's add user input.
. You have already used the readline-sync package for this purpose. How about using the same package?
. Replace the fixed values ​​for weight and height with data reported by the person when answering the questions "What's your weight?" and "How tall are you?" no terminal.

. Now we have a problem: weight is not an integer! This means that we need to change the way we request input for this data a little bit.
.. The readline-sync package has a specific function to handle these cases. Consult the package documents and find the appropriate method to carry out the entrance of floats.
.. Use it to order the weight input.

. Let's make our script a little more sophisticated. In addition to printing the BMI on the screen, also print which category in the table below that BMI fits into:

. Calculate the average speed of a car in a race
.. The formula for calculating average speed is distance/time.
.. Store or script in speed.js file.
.. Now allow the script to run via the npm run speed command. To do this, create a speed key inside object scripts in package.json.
.. Use readline-sync to request data from the person.
.. Consider distance in meters and time in seconds. Note that we are now working with whole numbers.

. Create a "guessing game" in which a person wins if they guess the random number generated
.. The script must be run through the command npm run toss.
.. Use readline-sync to perform data entry.
.. Store the script in raffle.js.
.. The generated number must be an integer between 0 and 10.
.. If the person hits the number, display "Congratulations, correct number!" on the screen.
.. If a person misses the number, display on the screen "Oops, it wasn't this time. The number was [drawn number]".
.. At the end, ask if the person wants to play again. If so, go back to the beginning of the script.

. Create an index.js file that asks which script to run
.. The script must be called through the npm start command.
.. Use readline-sync to perform data entry
.. When built, the script should display a numbered list of available scripts.
.. By typing a script number and pressing enter, the script must be installed.
.. You can use or require to run the script in question.

== Bonus

. Create a script that factorials an n number.
.. Use readline-sync to perform data entry.
.. The script must be called through the command npm run factorial
.. navigating the script to the menu created in exercise 5.
.. watching over validations to ensure the value is an integer greater than 0.

. Create a script that displays the value of the first elements of the fibonacci sequence.
.. The fibonacci sequence starts with 0 and 1 and the following numbers are always the sum of the two previous numbers.
.. Store the script in the fibonacci.js file.
.. Use readline-sync to perform data entry.
.. The script must be called through the command npm run fibonacci
.. navigating the script to the menu created in exercise 5.
.. Do not print the value 0, as it is not included in the sequence;
.. When n = 10, exactly 10 elements must be needed;
.. watching over validations to ensure the value is an integer greater than 0.