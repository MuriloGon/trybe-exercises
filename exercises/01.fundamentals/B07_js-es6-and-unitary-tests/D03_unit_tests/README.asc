= Exercises

== Practicing testing implementation - Part 1

You will implement several tests in different contexts in order to consolidate the mechanics and also the way of thinking about tests.

. Copy the functions already implemented and develop the tests. Separate functions into files to avoid any problems.
The `sum(a, b)` function returns the sum of parameter `a` and `b`
.. Test if the return `sum(4, 5)` is `9`
.. Test if the return `sum(0, 0)` is `0`
.. Test if the sum function throws an error when the parameters are `4` and `"5"` (string 5)
.. Test if an error message is "parameters must be numbers" when making a call `sum(4, "5")`

. The `myRemove)arr, item)` function receives an `arr` array and returns a copy of that array without the `item` element if it exists in the array
.. Check if the call `myRemove([1, 2, 3, 4], 3)` calculates the expected array
.. Check that the call `myRemove([1, 2, 3, 4], 3)` *does not* return the array `[1, 2, 3, 4]`
.. Check that the array passed by parameter *has not* changed
.. Check if the call `myRemove ([1, 2, 3, 4], 5)` returns the expected array

. The `myRemoveWithoutCopy(arr, item)` function receives an `arr` array and returns the array itself without the `item` element if it exists in the array
.. Check that the call `myRemoveWithoutCopy([1, 2, 3, 4], 3)` returns the expected array
.. Check that the call `myRemoveWithoutCopy([1, 2, 3, 4], 3)` *does not* return the array `[1, 2, 3, 4]`
.. Make a call to the function `myRemoveWithoutCopy` and check if the array passed by parameter has changed
.. Check that the call `myRemoveWithoutCopy([1, 2, 3, 4], 5)` returns the expected array

. The function `myFizzBuzz(num)` receives a number `num` and returns `"fizzbuzz"` if the number is divisible by `3` and `5`, returns `"fizz"` if it is divisible by only `3`, returns `"buzz"` if divisible only by `5`, returns the number itself if not divisible by `3` or `5` and returns `false` if `num` is not a number
.. Make a call with a number divisible by `3` and `5` and check if the return is as expected
.. Make a call with a number divisible by `3` and check if the return is as expected
.. Make a call with a number divisible by `5` and check if the return is as expected
.. Make a call with a number that is not divisible by `3` or `5` and check if the return is as expected
.. Make a call with a parameter that is not a number and check if the return is as expected

. Compare two objects (JSON) to check whether they are identical or not

== Practicing TDD - Part 2

In this part, the exercises are divided into two groups: first, you will write code based on the tests. Then you will read a code and what it has to answer for. From there, you will write tests and use them as a base to change the code. As well? Well, let's go step by step!
Writing test code
Given the test cases below, write the functions in order to pass the tests. *It is important to never change the tests or variables already written in the code*:
Copy the tests already implemented and develop the functions. Separate functions into files to avoid any problems.

. Write the addOne function to pass the tests already implemented.
. Write the wordLengths function to pass the tests already implemented.
. Write the sumAllNumbers function to pass the tests already implemented.
. Write the findTheNeedle function to pass the tests already implemented.

== Rewriting functions using TDD - Part 3

Now we have changed a little: we have a function ready (and done in the wrong way, that is, without working properly), the parameters that must be passed to it and the expected response. Write tests to understand and test the behavior of the function, and then change it to pass the tests. Use the test cases above as inspiration if in doubt!
[TIP]
small and numerous tests! Write one at a time and gradually correct the function.

. Use the parameter variable as a parameter of the function in `part3_ex1.js`, write tests to check if it is returning as seen in the result variable and, if not, change the code so that it passes the tests.
. Use the parameter variable as a parameter of the function in `part3_ex2.js`, write tests to check if it is returning as seen in the result variable and, if not, change the code so that it passes the tests.
. Use the parameter variable as a parameter of the function in `part3_ex3.js`, write tests to check if it is returning as seen in the result variable and, if not, change the code so that it passes the tests.
. Use the parameter variable as a parameter of the function in `part3_ex4.js`, write tests to check if it is returning as seen in the result variable and, if not, change the code so that it passes the tests.

== Bonus

=== Bonus 1
Imagine that you are going to build a vending machine (like the ones that sell soda). The machine accepts coins and calculates the difference between the total amount that must be paid and the amount received from the person who buys it. This machine has a set of coins. You must implement the following logic: given the change, the machine returns a list of the coins it will return to the person.

==== Requirements
As a person who buys from vending machines, I would like to select an item, deposit payment and receive the item and change.

==== Acceptance criteria
* A successful call to a `getChange` function should return a list with the value of the coins that will be returned to the person
This list must be in decreasing value format
* Repetition of currency values ​​is permitted, for example, `[200, 100, 50, 20, 10, 2, 2]`
* An error with the message *paid value is not enough* should be thrown if the amount paid is less than the purchase amount

==== Available currencies
The coins will be represented by the values ​​`200, 100, 50, 20, 10, 5, 2 and 1`. Below, there is a list of correspondence with the values ​​in reais (R$)
* 200 (R$ 2)
* 100 (R$ 1)
* 50 (R$ 0.50)
* 20 (R$ 0.20)
* 10 (R$ 0.10)
* 5 (R$ 0.05)
* 2 (R$ 0.02)
* 1 (R$ 0.01)

The *amount* of each coin is infinite, imagine that this is a simplification of the problem.

==== Example
If a person buys items with a total value of R $ 2.15 (that is, 215) and pays R $ 3 (that is, 300), the change is R $ 0.85 (that is, 85). To return this change to the person, the coins must be returned 1x R $ 0.50, 1x R $ 0.20, 1x R $ 0.10 and 1x R $ 0.05, thus forming the list `[50, 20, 10, 5]`.

==== Implementation
Finalize the implementation of the getChange (payable, paid) function.
payable is the amount to be paid, or the total amount
paid is the amount the person paid

[CAUTION]
The code must be implemented in `bonus1.js` file

=== Testes unitários
. As stated earlier, the unit tests are already ready, and their implementation must pass through all of them.

[CAUTION]
Tests can be found on `bonus1.js` file

=== Bonus 2

Write the factorial function to pass the tests already implemented.

[CAUTION]
Tests can be found on `bonus2.js` file

=== Bonus 3

Write the removeMiddle function to pass the tests already implemented.

[CAUTION]
Tests can be found on `bonus3.js` file

=== Bonus 4

Use the parameter variable as a parameter of the function below, write tests to check if it is returning as seen in the result variable and, if not, change the code so that it passes the tests.

[TIP]
Small and numerous tests! Write one at a time and gradually correct the function.

[CAUTION]
Tests can be found on `bonus4.js` file

=== Bonus 5

Kata or Code Kata are programming exercises that help to improve skills through practice and repetition.
Kata 'Password checker': Create a Verify() function that returns `false` for the cases listed in the repository and `true` otherwise. It is not necessary to make the extra items (2, 3 and 4) from the repository.

==== PasswordChecker
Create a Password verifications class called “PasswordVerifier”.

. Add the following verifications to a master function called “Verify()”
* password should be larger than 8 chars
* password should not be null
* password should have one uppercase letter at least
* password should have one lowercase letter at least
* password should have one number at least
* Each one of these should throw an exception with a different message of your choosing

. Add feature: Password is OK if at least three of the previous conditions is true
. Add feature: password is never OK if item 1.4 is not true.
. Assume Each verification takes 1 second to complete. How would you solve items 2 and 3 so tests can run faster?

[CAUTION]
Implement it on `bonus5.js` file
