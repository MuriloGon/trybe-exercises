== Part I

. Make the necessary modifications to the function so that its behavior respects the scope in which each .variable was declared.
* Modify the function structure so that it is an arrow function.
* Modify the concatenations for template literals.
Copy the code below.
+
[source, javascript]
----
function testingScope(escopo) {
  if (escopo === true) {
    var ifScope = 'Não devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' ótimo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    var elseScope = 'Não devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
  console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessário esta linha pode ser removida.
}

testingScope(true);
----

. Copy the code below and make a function that returns the oddsAndEvens array in ascending order.
Use template literals for the console.log call (oddsAndEvens); return "Numbers 2,3,4,7,10,13 are sorted in ascending order!".
Bonus (optional): try the same exercise using the array.sort () method. Spoiler: It is possible to perform a function that orders any array of numbers.
Copy the code below.

== Part II

Below, you will see some specifications of algorithms to develop. It is essential that you use what you have learned about `let`, `const`, `arrow functions`, `template literals` and `ternary operator`.

. Create a function that receives a number and returns its factorial.
* In mathematics, the factorial of a non-negative number `N`, with the notation `N!` , is the product of all integers less than or equal to `N`.
+
----
Example: 4! = 4 * 3 * 2 * 1 = 24.
----

* *Bonus (optional)*: try to do the same exercise recursively.

. Create a function that receives a sentence and returns the longest word.
* Example:
+
[source, javascript]
----
longestWord("Antônio foi no banheiro e não sabemos o que aconteceu") // retorna 'aconteceu'
----

. Create a page that contains:
* A button to which an event listener will be associated;
* A `clickCount` variable in the *JavaScript* file that accumulates the number of clicks on the button;
* A field in the *_HTML_* that updates the number of clicks on the button as the `clickCount` variable is updated.

. Create *JavaScript* code with the following specification:

[TIP]
*Don't forget to use* `template literals`

* Function 1: Write a function that will receive a string as a parameter. Your function should look for the letter x in any string you determine and replace it with the string you passed as a parameter. Your function should return this new string.
+
----
Example:
* Determined string: "Tryber x here!"
* Parameter: "Bebeto"
* Return: "Tryber Bebeto here!"
----

* An array with global scope, which is the scope of the *JS* file, in this case, containing five strings with their main `skills`.

* Function 2: Write a function that will receive the `string` returned from Function 1 as a parameter. This function must concatenate the `skills` of the global array to the `string` that was passed to Function 2 via parameter. You must order the skills in alphabetical order. Your function should return this new `string`.
+
----
Example: "Tryber x here! My top five skills are:
** JavaScript;
** HTML; ... #goTrybe ".
----