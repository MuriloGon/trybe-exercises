== Exercises - ES6 Higher Order Functions

=== Part1

. Create a first-class function that returns an object `{full name, email}` from a new person hired. Pass your role as a HOF newEmployees parameter to create each hired person in their respective `id`. Your role should receive the full name of the employee as a parameter and automatically generate an email in the format `person_name @ trybe.com`.
+
[source, javascrit]
----
const newEmployees = () => {
  const employees = {
    id1: // Name: Pedro Guerra -> Call your function by passing the name Pedro Guerra as a parameter
    id2: // Name: Luiza Drumond -> Call your function by passing the name Luiza Drumond as a parameter
    id3: // Name: Carla Paiva -> Call your function by passing the name Carla Paiva as a parameter
  }
  return employees;
};
----
. Develop an HOF that returns the result of a draw. This HOF will generate a random number between 1 and 5 taking as parameters the number bet and a function that checks if the number bet is equal to the number drawn. The return of your HOF must be a string (Ex: "Try again" or "Congratulations you won").

. Create an HOF using the concept of `currying`. Pass as parameters the correct answer (Ex: Feedback) for a question and an answer to be validated (Ex: Response of a person). Your HOF should check that the response sent by the user is correct. If so, the function returns `true`, if not, the function returns` false`.
+
[source, javascript]
----
// Suggestion of responses to be validated.
const correctAnswer = 'higher order function';
const userAnswer = 'HIGHER ORDER FUNCTION';
----

. Create an HOF that will receive three parameters. The first will be an array of correct answers (Template), the second will be an array of answers to be checked (Answers from the student person) and the third is a function that checks if the answer is correct and counts the final score received by the student. student person. At the end, the HOF must return the total count of correct answers.

* When the answer is correct, the count goes up 1 point, when it is incorrect it goes down 0.5 points, and when there is no answer ("N.A") the count does not change.
+
[source, javascript]
----
const rightAnswers = ['A', 'C', 'B', 'D', 'A', 'A', 'D', 'A', 'D', 'C'];
const studentAnswers = ['A', 'N.A', 'B', 'D', 'A', 'C', 'N.A', 'A', 'D', 'B'];
----

=== Bonus - Game Actions Simulator

In these exercises you will implement HOFs that simulate a battle turn in a game. You will create functions that calculate damage, update status, and at the end, return the results of the round.
For the next exercises, copy the code below.
+
[source, javascript]
----
const mage = {
  healthPoints: 130,
  intelligence: 45,
  mana: 125,
  damage: undefined,
};

const warrior = {
  healthPoints: 200,
  strength: 30,
  weaponDmg: 2,
  damage: undefined,
};

const dragon = {
  healthPoints: 350,
  strength: 50,
  damage: undefined,
};

const battleMembers = {mage, warrior, dragon};
----
. Create a function that returns the dragon's damage.
The damage will be a random number between 15 (minimum damage) and the value of the `strength` attribute (maximum damage).

. Create a function that returns the damage done by the warrior.
* The damage will be a random number between the val

=== Part2

Now that you have implemented the functions for the previous three exercises, pass them as a parameter to other functions that will compose a `gameActions` object. The object will be composed of game actions and each action is denounced by an HOF, because in this case, they are functions that receive another function as a parameter.
Copy the code below and start your implementation:

[source, javascript]
----
const gameActions = {
  // Create HOFs on this object.
};
----

. Create the first HOF that makes up the `gameActions` object. It will be the function that simulates the turn of the character 'warrior'. This HOF will receive as a parameter the function that calculates the damage dealt by the character `warrior` and will update the` healthPoints` of the monster `dragon`. In addition, it must also update the value of the `damage` key of the` warrior`.
. Create the second HOF that makes up the `gameActions` object. It will be the function that simulates the mage character's turn. This HOF will receive as a parameter the function that calculates the damage dealt by the mage character and will update the `healthPoints` of the` dragon` monster. In addition to this, she must also update the value of the mage's `damage` and mana keys.
. Create the third HOF that makes up the `gameActions` object. It will be the function that simulates the turn of the monster `dragon`. This HOF will receive as a parameter the function that calculates the damage dealt by the monster `dragon` and will update the healthPoints of the characters mage and` warrior`. In addition to this, she must also update the value of the monster's 'damage' key.
. Add to the `gameActions` object a first class function that returns the updated battleMembers object and make a` console.log` to view the final result of the shift.