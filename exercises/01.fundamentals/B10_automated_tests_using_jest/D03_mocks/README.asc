== Exercises - Simulations

. Create a function that generates a random number between 0 and 100. You will also create the tests for that function. Using the mock, it provided the default return as 10. Test whether the function was called, what its return was and how many times it was called.

. With the same function as the previous exercise, using the mock, create a new implementation, which must receive two parameters and return the division of the first second. This implementation must occur only once. Do the tested tests.

. Still with the same function as the first exercise, using the mock, create a new implementation that receives three parameters and their multiplication. After doing the necessary tests for it, reset its implementation and create a new one, which receives a parameter and returns its double. Do the tested tests.

. Within the same file, create three functions. The first one must receive a string and return it in capital letters. A second must also receive a string and return only the first letter. The third must receive two strings and concatenate them. Mock the file. Make a new implementation for the first function, but now it should return the lowercase string. For a second function, a new implementation must return the last letter of a string. The third should take three strings and concatenate them.

. Using the functions from the previous exercise, repeat the implementation for the first function. After repeating the implementation, restore the original implementation and create the tested tests to validate.

. Create a function that makes the request for a dog photo api. Mock the request and create two tests. The first must interpret that the request is resolved and had the value "request success". The second must interpret that the request failed and have the value "request failed". Create any tests you think are necessary.

== Bonus

. The code below uses a joke API and implementation of fetchJoke, which is a generator of ruined jokes. The jokes are generated randomly through the end point stored in API_URL. Make a test that the API call for a specific result. To do this, make a mock of the fetch, which makes the call to the API, following the following data:

[source, javascript]
----
{
  'id': '7h3oGtrOfxc',
  'joke': 'Whiteboards ... are remarkable.',
  'status': 200
}
----

[source, javascript]
----
const API_URL = 'https://icanhazdadjoke.com/';

const fetchJoke = () => {
  return fetch(API_URL, { headers: { Accept: 'application/json' }})
    .then(response => response.json())
    .then(data => data.joke);
};
----