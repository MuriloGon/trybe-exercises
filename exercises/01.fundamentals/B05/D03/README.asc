= Trybe Calender

== Exercise 1

The `dezDaysList` array contains the last two days of November and the days of the month of December. Develop a function that dynamically creates each calendar day and add them as sons / daughters of the `<ul>` tag with ID `"days"`. Note that the 29th and 30th of November are in the array as they represent Monday and Tuesday respectively.

* The days must be contained in a `<li>` tag, and everyone must have the day class.  Ex: `<li class = "day"> 3 </li>`
* The days 24, 25 and 31 are holidays and, in addition to the day class, they must also contain the holiday class. Ex: `<li class = "day holiday"> 24 </li>`
* The 4th, 11th, 18th and 25th are Friday. They must contain the day class and the friday class. Ex: `<li class = "day friday"> 4 </li>`

[source, javascript]
----
const dezDaysList = [29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
----

== Exercise 2

Implement a function that takes the string "Holidays" as a parameter and dynamically creates a button with the name "Holidays".

* Add the ID `"btn-holiday"` to this button.
* Add this button as a child of the `<div>` tag with class `"buttons-container"`.

== Exercise 3

Implement a function that adds a "click" event to the "Holidays" button that changes the background color of the days that have the `"holiday"` class.

* It is interesting that this button also has the reverse logic. When clicked again it returns to the initial configuration with the color `"rgb (238,238,238)"`.

== Exercise 4

Implement a function that takes the string "Friday" as a parameter and dynamically creates a button with the name "Friday".

* Add the "btn-friday" ID to this button.
* Add this button as a child of the `<div>` tag with class `"buttons-container"`.

== Exercise 5

Implement a function that adds a "click" event to the "Friday" button that modifies the text displayed on days that are Friday.

* It is interesting that this button also has the reverse logic. When clicked again it returns to the initial configuration displaying the days.

== Exercise 6

Implement two functions that create a "zoom" effect. When hovering the mouse pointer over a day of the month on the calendar, the text for that day should increase, and when the mouse pointer leaves the day, the text should return to its original size.

[TIP]
https://developer.mozilla.org/en-US/docs/Web/API/Event/target[`Property: event.target.`]

== Exercise 7:

Implement a function that adds a custom task to the calendar. The function must receive as a parameter the string with the task name (ex: "cook") and dynamically create an element with the `<span>` tag containing the task.

* The created element must be added as a child of the `<div>` tag that has the class `"my-tasks"`.

== Exercise 8:

Implement a function that adds a colored caption to the task created in the previous exercise. This function should receive as a parameter a string ("color") and dynamically create an element of tag `<div>` with the task class.

* The color parameter should be used as the background color of the `<div>` created.
* The created element must be added as a child of the `<div>` tag that has the class `"my-tasks"`.

== Exercise 9

Implement a function that adds an event that when clicking on the element with the `<div>` tag referring to the color of your task, assign this element the task selected class, that is, when your task has the task selected class it will be selected.

* When you click on the element again, your class should return to being just `task`, that is, this task is no longer a selected task.

== Exercise 10
Implement a function that adds an event that, when clicking on a day of the month in the calendar, assigns that day the color of the legend of your selected task.

* When you click on the day again with the color of the legend, your color should return to the initial setting `rgb (119,119,119)`.

== Bonus:
Are we going to add appointments to your calendar? Implement a function that, when typing an appointment in the "COMMITMENTS" text box, adds the item to the "MY COMMITMENTS" list by clicking the "ADD" button.

* If no character is entered in the `input` field, the function should return an `alert` with an error message when clicking "ADD".
* When pressing the "enter" key, the event must also be triggered.

[TIP]
https://www.w3schools.com/JSREF/event_key_keycode.asp[Property: `keyCode`].