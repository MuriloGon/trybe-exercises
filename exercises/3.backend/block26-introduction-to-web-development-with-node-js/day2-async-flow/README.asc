== Exercises

. Create a function that takes three parameters and returns a Promise .
. If any of the parameters received is not a number, reject the Promise with the reason "Enter numbers only" .
. If all parameters are numeric, add the first two and multiply the result by the third ( (a + b) ;. c ).
  ** If the result is less than 50, reject the Promise with the reason "Too low value"
  ** If the result is greater than 50, solve the Promise with the obtained value.
. Write code to consume the function built in the previous exercise.
  ** Generate a random number from 1 to 100 for each parameter the function receives. To generate a random number, use the following code snippet: Math.floor(Math.random() * 100 + 1) .
  ** Call the function from the previous exercise, passing the three random numbers as parameters.
  ** Use then and catch to manipulate the Promise returned by the function:
    *** If Promise is rejected, write the reason for rejection on the screen.
    *** If the Promise is resolved, write the calculation result on the screen.
. Rewrite the code from the previous exercise so that it uses async/await .
  ** You can use then and catch , async/await or a mixture of the two to write your code. Try not to use callbacks.
  ** Create a function that reads all the data from the file and prints each character in id-Name format. For example: 1 - Homer Simpson .
  ** Create a function that takes a character's id as a parameter and returns a Promise that resolves with the data of the character that has the given id. If there is no character with the given id, reject the Promise with the reason "id not found".
  ** Create a function that changes the simpsons.json file removing the characters with id 10 and 6.
  ** Create a function that reads the simpsons.json file and creates a new file, called simpsonFamily.json , containing the characters with id 1 to 4.
  ** Create a function that adds the character Nelson Muntz to the simpsonFamily.json file.
  ** Create a role that replaces the character Nelson Muntz with the character Maggie Simpson in the simpsonFamily.json file.
  ** Create a function that reads and writes multiple files at the same time.
. Use Promise.all to manipulate multiple files at the same time.
  ** Given the following array of strings: ['Finally', 'I'm', 'using', 'Promise.all', '!!!'] Have your function create a file containing each string, with the name of each file equals file<index + 1>.txt . For example, for the string "Finally", the filename is file1.txt .
  ** Program your function so that it reads all the files created in the previous item, store this information and write it in a file called fileAll.txt .
  ** The contents of the fileAll.txt file should be Finally I'm using Promise.all !!! .

== Bonus
. Create a script that displays the contents of a file chosen by the user on the screen:
Ask the user which file they want to read.
  ** Read the indicated file.
  ** If the file does not exist, display "File does not exist" on the screen and end the script execution.
  ** If the file exists, write its content on the screen.
. Create a script that substitutes one word for another in a file chosen by the user:
  ** Ask the user which file they want to use.
  ** Read the file.
  ** If the file does not exist, display an error on the screen and end the script execution.
  ** If the file exists, request the word to be replaced.
. Request the new word, which will replace the previous word.
  ** Print the contents of the file on the screen with the words already replaced.
  ** Ask for the destination file name.
  ** Save the new file in the destination path.